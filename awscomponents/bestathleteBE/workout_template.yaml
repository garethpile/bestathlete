AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for creating an API Gateway and Lambda function

Resources:
  # Define the Lambda function
  WorkoutInsertLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: WorkoutInsertLambdaFunction
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt WorkoutInsertLambdaFunctionRole.Arn
      Code:
        ZipFile: |
          import json
          import pymysql

          # RDS MySQL database configuration
          db_config = {
              'host': 'bestathlete-prod.cc5cmwrwdr10.eu-west-1.rds.amazonaws.com',
              'user': 'admin',
              'password': 'BestAthlete202#',
              'database': 'bestathlete'
          }

          def lambda_handler(event, context):
              try:
                  # Parse the incoming payload
                  data = json.loads(event['body'])

                  # Construct the SQL query with placeholders for all columns
                  insert_query = "INSERT INTO Workout (idWorkout, idCustomer, workoutAthleteFeedback, " \
                                 "workoutDescription, workoutType, workoutDateTime, workoutDistance, " \
                                 "workoutTime, workoutPace, workoutAverageHeartRate, workoutAverageCadence, " \
                                 "workoutAverageSpeed, workoutCalories, workoutAverageTemperature, " \
                                 "workoutElevationGain, created, lastUpdated) " \
                                 "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);"

                  # Connect to the database
                  connection = pymysql.connect(**db_config)

                  with connection.cursor() as cursor:
                      # Execute the SQL query using the values from the payload
                      cursor.execute(insert_query, tuple(data.values()))

                  # Commit the transaction and close the connection
                  connection.commit()
                  connection.close()

                  # Return a successful response
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Data inserted successfully')
                  }

              except Exception as e:
                  # Return an error response if anything goes wrong
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f'Error: {str(e)}')
                  }

  # Define the IAM role for the Lambda function
  WorkoutInsertLambdaFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: 'WorkoutInsertLambdaFunctionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/WorkoutInsertLambdaFunction:*'
              - Effect: Allow
                Action: 'rds-db:connect'
                Resource: !Sub 'arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:db/bestathlete-prod/*'
              # Add any other necessary permissions here...

  # Define the API Gateway
  CustomerDataApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: CustomerDataApi

  # Define the API Gateway's root resource
  CustomerDataApiRootResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref CustomerDataApi
      ParentId: !GetAtt CustomerDataApi.RootResourceId
      PathPart: 'insert-data'

  # Define the API Gateway method for POST
  CustomerDataApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref CustomerDataApi
      ResourceId: !Ref CustomerDataApiRootResource
      HttpMethod: 'POST'
      AuthorizationType: 'NONE'
      Integration:
        Type: 'AWS'
        IntegrationHttpMethod: 'POST'
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WorkoutInsertLambdaFunction.Arn}/invocations'
        PassthroughBehavior: 'NEVER'
        RequestTemplates:
          'application/json': '{"body": $input.json("$")}'
      MethodResponses:
        - StatusCode: '200'

Outputs:
  ApiEndpoint:
    Description: URL endpoint for the API Gateway
    Value: !Sub 'https://${CustomerDataApi}.execute-api.${AWS::Region}.amazonaws.com/insert-data'
